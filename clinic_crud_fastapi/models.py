from sqlalchemy import Column, Integer, String, Enum, Date, DateTime, ForeignKey
from sqlalchemy.orm import relationship
from datetime import datetime
from database import Base
import enum

class GenderEnum(str, enum.Enum):
    male = "male"
    female = "female"
    other = "other"

class ApptStatusEnum(str, enum.Enum):
    scheduled = "scheduled"
    completed = "completed"
    cancelled = "cancelled"
    no_show = "no_show"

class Patient(Base):
    __tablename__ = "patients"
    patient_id = Column(Integer, primary_key=True, index=True)
    first_name = Column(String(100), nullable=False)
    last_name = Column(String(100), nullable=False)
    email = Column(String(255), nullable=False, unique=True, index=True)
    phone = Column(String(30), nullable=False, unique=True, index=True)
    gender = Column(Enum(GenderEnum), nullable=False)
    date_of_birth = Column(Date, nullable=False)
    # created_at is generated by DB; we don't need to set it here

    appointments = relationship("Appointment", back_populates="patient", cascade="all, delete-orphan")

class Appointment(Base):
    __tablename__ = "appointments"
    appointment_id = Column(Integer, primary_key=True, index=True)
    patient_id = Column(Integer, ForeignKey("patients.patient_id", ondelete="CASCADE", onupdate="CASCADE"), nullable=False)
    doctor_id = Column(Integer, nullable=False)  # keep minimal for example; FK exists in DB schema
    room_id = Column(Integer, nullable=True)
    scheduled_at = Column(DateTime, nullable=False, default=datetime.utcnow)
    status = Column(Enum(ApptStatusEnum), nullable=False, default=ApptStatusEnum.scheduled)
    reason = Column(String(500), nullable=True)

    patient = relationship("Patient", back_populates="appointments")
